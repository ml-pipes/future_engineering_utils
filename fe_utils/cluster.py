# AUTOGENERATED! DO NOT EDIT! File to edit: cluster.ipynb (unless otherwise specified).

__all__ = ['dataloader', 'BayesClusterTrainer']

# Cell

def dataloader(path):
    """
    dataloader for saved embeddings. Load from numpy file
    """
    pass

# Cell

class BayesClusterTrainer():
    def __init__(self, space, cost_fn_params, embeddings, labels, *args, **kwargs):
        self.space = space
        self.cost_fn_params = cost_fn_params

        self.embeddings = embeddings
        self.labels = labels

        self.logs = []

    def generate_clusters(self, embeddings,
                        min_cluster_size,
                        cluster_selection_epsilon,
                        cluster_selection_method,
                        metric,
                        n_neighbors,
                        n_components,
                        random_state = 42):
        """
        Generate HDBSCAN cluster object after reducing embedding dimensionality with UMAP
        """

        umap_embeddings = (umap.UMAP(n_neighbors=n_neighbors,
                                    n_components=n_components,
                                    metric='cosine',
                                    random_state=random_state)
                                    .fit_transform(embeddings))

        clusters = hdbscan.HDBSCAN(min_cluster_size = min_cluster_size,
                               metric=metric, cluster_selection_epsilon = cluster_selection_epsilon,
                               cluster_selection_method=cluster_selection_method,
                               gen_min_span_tree=True).fit(umap_embeddings)

        return clusters

    def train(self):
        print('*' * 10)
        print('TRAINING NOW!')
        print('*' * 10)
